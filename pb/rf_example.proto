// Copyright 2020 Team RelicFrog
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package aribor;

import "google/protobuf/timestamp.proto";

option go_package = ".;aribor";

//
// -- proto struct / helper message objects --
//

message Empty {}

message Date {
  // Year of the date. Must be from 1 to 9999, or 0 to specify a date without
  // a year.
  int32 year = 1;

  // Month of a year. Must be from 1 to 12, or 0 to specify a year without a
  // month and day.
  int32 month = 2;

  // Day of a month. Must be from 1 to 31 and valid for the year and month, or 0
  // to specify a year by itself or a year and month where the day isn't
  // significant.
  int32 day = 3;
}

//
// -- proto messages --
//

message UserInviteCode {

  string id = 1;
  string meta_code = 2;
  string meta_for_app_role = 3;

  bool is_fixture = 4;
  bool is_deleted = 5;
  bool is_test = 6;

  google.protobuf.Timestamp meta_valid_from = 7;
  google.protobuf.Timestamp meta_valid_to = 8;
  google.protobuf.Timestamp created_at = 9;
  google.protobuf.Timestamp deleted_at = 10;
}

message UserInviteCodeFilter {

  string meta_code = 1;
  string meta_for_app_role = 2;
}

message UserRole {

  string id = 1;
  string tag = 2; // e.g. "ADM" for admin / "DIR" for director
  string name = 3;
  string description = 4;
  int32 weight = 5;
  bool is_locked = 6; // not deletable (e.g. for role "ADM")
  bool is_fixture = 7;
  bool is_deleted = 8;

  google.protobuf.Timestamp created_at = 9;
  google.protobuf.Timestamp updated_at = 10;
  google.protobuf.Timestamp deleted_at = 11;
}

message UserGroup {

  string id = 1;
  string name = 2;
  string description = 3;
  repeated User users = 4;

  bool is_fixture = 5;
  bool is_deleted = 6;

  google.protobuf.Timestamp created_at = 7;
  google.protobuf.Timestamp updated_at = 8;
  google.protobuf.Timestamp deleted_at = 9;
}

message User {

  string id = 1;
  string first_name = 3;
  string last_name = 4;
  string email = 5;

  string sec_pwd_hash = 6;
  string sec_pwd_salt = 7;
  string sec_user_name = 8;

  UserRole user_role = 9;
  UserProfile user_profile = 10;

  bool is_fixture = 11;
  bool is_deleted = 12;

  google.protobuf.Timestamp created_at = 13;
  google.protobuf.Timestamp updated_at = 14;
  google.protobuf.Timestamp deleted_at = 15;
}

message UserAddress {

  string id = 1;
  string street = 2;
  string street_num = 3;
  string zip_code = 4;
  string state = 5;
  string country = 6;
  bool is_deleted = 7;

  google.protobuf.Timestamp created_at = 8;
  google.protobuf.Timestamp updated_at = 9;
  google.protobuf.Timestamp deleted_at = 10;
}

message UserProfile {

  enum PhoneType {
    UNKNOWN = 0;
    MOBILE = 1;
    HOME = 2;
    WORK = 3;
  }

  string id = 1;

  string middle_name = 9;
  string birth_name = 10;
  string birth_city = 11;
  string birth_country = 12;
  string user_avatar_url = 13;

  UserAddress address = 14;
  UserConfig settings = 15;
  Date dob = 16;

  message PhoneNumber {

    string number = 1;
    PhoneType type = 2;
  }

  repeated PhoneNumber phone_numbers = 17;

  bool is_fixture = 18;
  bool is_deleted = 19;

  google.protobuf.Timestamp created_at = 20;
  google.protobuf.Timestamp updated_at = 21;
  google.protobuf.Timestamp deleted_at = 22;
}

message UserConfig {

  string id = 1;

  repeated string shortcuts = 2;

  message Layout {

    string style = 1;
    bool custom_scrollbars = 2;
    string theme_main = 3;
    string theme_navbar = 4;
    string theme_toolbar = 5;
    string theme_footer = 6;

    message LayoutConfig {

      string scroll = 1;
      string mode = 2;
      message LayoutBlockConfig {

        string position = 1;
        bool display = 2;
        bool folded = 3;
      }
    }
  }
}

//
// -- UserRoleService definition --
//

service UserRoleService {

  rpc CreateRole(CreateRoleReq) returns (CreateRoleRes);
  rpc GetRole(GetRoleReq) returns (GetRoleRes);
  rpc UpdateRole(UpdateRoleReq) returns (UpdateRoleRes);
  rpc DeleteRole(DeleteRoleReq) returns (DeleteRoleRes);
  rpc ListRoles(ListRoleReq) returns (stream ListRoleRes);
}

message CreateRoleReq { UserRole role = 1; }
message CreateRoleRes { UserRole role = 1; }
message GetRoleReq    { string id = 1;     }
message GetRoleRes    { UserRole role = 1; }
message UpdateRoleReq { UserRole role = 1; }
message UpdateRoleRes { UserRole role = 1; }
message DeleteRoleReq { string id = 1;     }
message DeleteRoleRes { bool success = 1;  }
message ListRoleReq   {                    }
message ListRoleRes   { UserRole role = 1; }

//
// -- UserInviteCodeService definition --
//

service UserInviteCodeService {

  rpc CreateInviteCode(CreateInviteCodeReq) returns (CreateInviteCodeRes);
  rpc GetInviteCode(GetInviteCodeReq) returns (GetInviteCodeRes);
  rpc UpdateInviteCode(UpdateInviteCodeReq) returns (UpdateInviteCodeRes);
  rpc DeleteInviteCode(DeleteInviteCodeReq) returns (DeleteInviteCodeRes);
  rpc ListInviteCodes(ListInviteCodeReq) returns (stream ListInviteCodeRes);
  rpc ListFilteredInviteCodes(ListFilteredInviteCodeReq) returns (stream ListFilteredInviteCodeRes);
  rpc GetVersion (VersionReq) returns (VersionRes);
}

message CreateInviteCodeReq       { UserInviteCode inviteCode = 1;   }
message CreateInviteCodeRes       { UserInviteCode inviteCode = 1;   }
message GetInviteCodeReq          { string id = 1;                   }
message GetInviteCodeRes          { UserInviteCode inviteCode = 1;   }
message UpdateInviteCodeReq       { UserInviteCode inviteCode = 1;   }
message UpdateInviteCodeRes       { UserInviteCode inviteCode = 1;   }
message DeleteInviteCodeReq       { string id = 1;                   }
message DeleteInviteCodeRes       { bool success = 1;                }
message ListFilteredInviteCodeReq { UserInviteCodeFilter filter = 1; }
message ListFilteredInviteCodeRes { UserInviteCode inviteCode = 1;   }
message ListInviteCodeReq         {                                  }
message ListInviteCodeRes         { UserInviteCode inviteCode = 1;   }
message VersionReq                {                                  }
message VersionRes                { string version = 1;              }
